snippet env
	#!/usr/bin/env python3
snippet utf
	# coding: utf-8
snippet __main__
	if __name__ == '__main__':
	    ${1:main()}
snippet noqa
	noqa: #${1:F123}
snippet pdb
	__import__('pdb').set_trace()
snippet from
	from ${1} import ${2}
snippet imp
	import ${1}
snippet contest
	# Choose compiler on CodeForces: Python 3.7
	import sys

	sys.setrecursionlimit(1 << 30)

	for line in sys.stdin:
	    line
	"""
	Use global keyword when global variable used in function
	"""
snippet csv_writer
	import csv
	with open('output.csv', 'w') as f:
	    csv_writer = csv.writer(f)
	    csv_writer.writerow(['Name', 'Number'])
	    csv_writer.writerow(['ABC', 123])
	    csv_writer.writerow(['DEF', 456])
snippet csv_reader
	import csv
	with open('input.csv') as f:
	    csv_reader = csv.reader(f)
	    for row in csv_reader:
	        print(', '.join(row))
#!
# --------------------------------------
#                utilities
# --------------------------------------
snippet convert
	import os
	import glob

	for path in glob.glob('*.jpg'):
	    cmd = 'convert {} -resize 800x ../resized_3/{}'.format(path, path)

	    print(cmd)
	    os.system(cmd)

# --------------------------------------
#              CTF snippets
# --------------------------------------
snippet ctf_rsa
	#!/usr/bin/env python3
	import gmpy2
	from Crypto.Util import number
	from Crypto.PublicKey import RSA


	cipher = number.bytes_to_long('string')

	# get "e", "n" from public key
	k = RSA.importKey(open('public-key.pem').read())
	e = k.key.e
	n = k.key.n

	e = 65537
	n = 123456789

	p = 123
	q = n / p

	assert gmpy2.is_prime(p)
	assert gmpy2.is_prime(q)
	assert p * q == n

	if p != q:
	    phi = (p - 1) * (q - 1)
	else:
	    phi = p * (q - 1)
	d = gmpy2.invert(e, phi)

	print(number.long_to_bytes(pow(cipher, d, n)))

snippet ctf_pil
	#!/usr/bin/env python3
	from PIL import Image

	img = Image.open('name.jpg')
	print(img.size)

	x, y = 0, 0
	width, height = 100, 100
	img.crop((x, y, x + width, y + height))
	img.transpose(Image.FLIP_LEFT_RIGHT)
	img.transpose(Image.FLIP_TOP_BOTTOM)
	img.transpose(Image.ROTATE_90)
	img.transpose(Image.ROTATE_180)
	img.transpose(Image.ROTATE_270)
	img.save('output.png')

snippet ctf_nc
	#!/usr/bin/env python3
	import pwn

	target = 'ip-or-address'
	port = int
	conn = pwn.remote(target, port)
	r = conn.recvuntil(':')
	r = conn.recvline(':')
	conn.send('%s\n' % command)
	conn.interactive

snippet ctf_ssh
	import pwn
	import warnings

	warnings.filterwarnings(action='ignore', module='.*paramiko.*')

	conn = pwn.ssh(host='<HOST>', user='<USER>', password='<PASSWORD>', port=PORT_INTEGER)
	conn.interactive()

snippet ctf_irc
	import pwn

	nick = 'name'
	host = 'ip or domain'
	channel = '#channel'

	conn = pwn.remote('irc.root-me.org', 6667)
	conn.send("NICK %s\r\n" % nick)
	conn.send("USER %s %s %s :%s\r\n" % (nick, nick, nick, nick))
	conn.send("JOIN %s\r\n" % channel)
	r = conn.recvuntil("KEYWORD") + conn.recvline()
	print(r)
	conn.interactive()

snippet ctf_xor
	import itertools

	def xor(s, key):
	    key = key * (len(s) / len(key) + 1)
	    return ''.join(chr(ord(x) ^ ord(y)) for (x,y) in itertools.izip(s, key))

snippet ctf_requests
	import requests

	session = requests.Session()
	r = session.get(url, allow_redirects=False)
	print(r.headers)
	print(r.content)
