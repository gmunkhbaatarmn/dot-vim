snippet include
	#include <${1:stdio.h}>

snippet define
	#define
snippet frein
	freopen ("input.txt", "rb", stdin);

snippet freout
	freopen ("output.txt", "w", stdout);

snippet main
	int main() {
		return 0;
	}
snippet continue
	continue;
snippet printf
	printf("${1}\n"${2});
snippet scanf
	scanf("${1}", &${2});
snippet unsigned
	unsigned
snippet liblint
	#define BASE 1000000000 /* don`t change this */
	#define MAX 70 /* length = max x 9 */

	typedef struct {
		int a[MAX];
		int count;
		int sign; /* positive is 0, negative is 1 */
	} Lint;

	int Lint_print(Lint n) {
		if (n.count <= 0) {
			printf("0");
			return 0;
		}

		if (n.sign == 1)
			printf("-");

		printf("%d", n.a[n.count-1]);
		int i;
		for (i=n.count-2; i>=0; i--)
			printf("%09d", n.a[i]);

		return 1;
	}
	int Lint_comp(Lint a, Lint b) {
		/* if sign is not same */
		if (a.sign < b.sign) return 1;
		if (a.sign > b.sign) return -1;

		int sign = 1;
		if (a.sign == 1) sign = -1;

		/* if digit is not same */
		if (a.count > b.count) return 1 * sign;
		if (b.count > a.count) return -1 * sign;

		/* if digit is same */
		int i;
		for (i=a.count-1; i>=0; i--) {
			if (a.a[i] > b.a[i]) return 1 * sign;
			if (b.a[i] > a.a[i]) return -1 * sign;
		}
		return 0;
	}
	Lint Lint_scan(char* buf) {
		Lint n;
		int i, j;
		int len = strlen(buf);

		/* if "0" or "-0" */
		if ((len == 1 && buf[0] == '0') || (len == 2 && buf[0] == '-' && buf[1] == '0')) {
			n.count = 0;
	    n.sign = 0;
			return n;
		}

		n.sign = 0;
		if (buf[0] == '-') {
			n.sign = 1;
			for (i=1; i<len; i++)
				buf[i-1] = buf[i];
			len--;
		}

		n.count = (len-1) / 9 + 1;

		n.a[n.count-1] = 0;
		int mod = (len-1) % 9 + 1;

		for (i=0; i<mod; i++)
			n.a[n.count-1] = n.a[n.count-1] * 10 + (buf[i] - '0');

		for (i=0; i<n.count-1; i++) {
			n.a[n.count-2-i] = 0;
			for (j=0; j<9; j++)
				n.a[n.count-2-i] = n.a[n.count-2-i] * 10 + buf[i*9+mod+j] - '0';
		}

		return n;
	}
	/* @require: int Lint_comp(Lint a, Lint b) */
	Lint Lint_add(Lint a, Lint b) {
		int i;
		Lint c = {{0}, 0, 0};

		/* fill zero */
		if (a.count > b.count) {
			c.count = a.count;
			for (i=b.count; i<a.count; i++)
				b.a[i] = 0;
		} else {
			c.count = b.count;
			for (i=a.count; i<b.count; i++)
				a.a[i] = 0;
		}

		/* Addition */
		if (a.sign == b.sign) {
			c.sign = a.sign;

			c.a[0] = 0;
			for (i=0; i<c.count; i++) {
				c.a[i] += (a.a[i] + b.a[i]);
				c.a[i+1] = c.a[i] / BASE;
				c.a[i] %= BASE;
			}

			if (c.a[c.count] > 0)
				c.count++;
			return c;
		}

		/* Subtraction */
		int a_sign = 1;
		int b_sign = -1;
		c.sign = a.sign;

		a.sign = b.sign = 0;
		int comp = Lint_comp(a, b);
		if (comp == 0) {
			c.count = 0;
			return c;
		}
		if (comp < 0) {
			c.sign = (c.sign+1) % 2;
			a_sign = -1;
			b_sign = 1;
		}

		c.a[0] = 0;
		for (i=0; i<c.count; i++) {
			c.a[i] += a_sign * a.a[i] + b_sign * b.a[i];
			c.a[i+1] = 0;
			if (c.a[i] < 0) {
				c.a[i+1] = -1;
				c.a[i] += BASE;
			}
		}

		while (c.count > 0 && c.a[c.count-1] <= 0)
			c.count--;

		return c;
	}
	/* @require: Lint Lint_add(Lint a, Lint b) */
	Lint Lint_sub(Lint a, Lint b) {
		b.sign = (b.sign + 1) % 2;
		if (b.count == 0) b.sign = 0;

		return Lint_add(a, b);
	}
	Lint Lint_mult(Lint a, Lint b) {
		int i, j;
		Lint c = {{0}, 0, 0};
		long long m[MAX] = {0};

		if (a.count == 0 || a.count == 0) {
			c.count = 0;
			return c;
		}
		c.count = a.count + b.count;

		for (i=0; i<a.count; i++)
		for (j=0; j<b.count; j++) {
			m[i+j] += (long long)a.a[i] * (long long)b.a[j];
			m[i+j+1] += m[i+j] / BASE;
			m[i+j] %= BASE;
		}

		c.a[0] = 0;
		for (i=0; i<c.count; i++)
			c.a[i] = m[i];

		while (c.count > 0 && c.a[c.count-1] == 0)
			c.count--;

		c.sign = (b.sign + a.sign) % 2;
		return c;
	}
	Lint Lint_div(Lint a, Lint b) {
		Lint c;
		if (b.count == 0) {
			fprintf(stderr, "Error: Division by zero.");
			c.count = 0;
			return c;
		}
		if (a.count == 0) {
			c.count = 0;
			return c;
		}

		int i, j, k, yes, cnt;

		/* if sign is not same */
		c.sign = 0;
		if (a.sign != b.sign) {
			c.sign = 1;
			/* a-- */
			a.a[0]--;
			i = 0;
			while (a.a[i] < 0) {
				a.a[i+1]--;
				a.a[i] += BASE;
				i++;
			}
		}

		int left, right, middle;
		long long m[MAX];
		long long n[MAX];

		m[a.count] = 0;
		for (i=0; i<a.count; i++)
			m[i] = a.a[i];

		c.count = a.count - b.count + 1;

		for (i=a.count-1, cnt=c.count-1; i>=b.count-1; i--, cnt--) {
			m[i] += m[i+1] * BASE;

			/* binary search : middle */
			left = 0;
			right = BASE - 1;
			middle = (left + right) / 2;
			while (left<=right) {
				/* n = b * middle */
				n[0] = 0;
				for (j=0; j<b.count; j++) {
					n[j] += (long long)b.a[j] * (long long)middle;
					n[j+1] = n[j] / BASE;
					n[j] %= BASE;
				}
				if (n[b.count] > 0)
					n[b.count-1] += n[b.count] * BASE;
				/* m < b*middle */
				yes = 0;
				for (j=i, k=b.count-1; !yes && k>=0; j--, k--)
					if (m[j] < n[k])
						yes = 1;
					else if (m[j] > n[k])
						break;
				if (yes) {
					right = middle-1;
					middle = (left + right) / 2;
					continue;
				}

				/* n = b * (middle+1) */
				n[0] = 0;
				for (j=0; j<b.count; j++) {
					n[j] += (long long)b.a[j] * (long long)(middle+1);
					n[j+1] = n[j] / BASE;
					n[j] %= BASE;
				}
				if (n[b.count] > 0)
					n[b.count-1] += n[b.count] * BASE;
				/* m >= b*(middle+1) */
				yes = 1;
				for (j=i, k=b.count-1; yes && k>=0; j--, k--)
					if (m[j] < n[k])
						yes = 0;
					else if (m[j] > n[k]) break;
				if (yes) {
					left = middle+1;
					middle = (left + right) / 2;
					continue;
				}

				/* b*middle <= m && m < b*(middle+1) */
				break;
			}
			c.a[cnt] = middle;

			/* Multiply */
			n[0] = 0;
			for (j=0; j<b.count; j++) {
				n[j] += (long long)b.a[j] * (long long)middle;
				n[j+1] = n[j] / BASE;
				n[j] %= BASE;
			}
			if (n[b.count] > 0)
				n[b.count-1] += n[b.count] * BASE;

			/* Subtraction */
			for (j=b.count-1, k=i; j>=0; j--, k--) {
				m[k] -= n[j];
				if (m[k] < 0) {
					m[k+1]--;
					m[k] += BASE;
				}
			}
		}

		if (a.sign != b.sign) {
			/* c++ */
			c.a[0]++;
			i = 0;
			while (c.a[i] >= BASE) {
				c.a[i+1]++;
				c.a[i] -= BASE;
				i++;
			}
			if (c.a[c.count] > 0)
				c.count++;
		}

		while (c.count>0 && c.a[c.count-1] == 0)
			c.count--;

		return c;
	}
	Lint Lint_mod(Lint a, Lint b) {
		Lint c = {{0}, 0, 0};
		if (b.count == 0) {
			fprintf(stderr, "Error: Division by zero.");
			c.count = 0;
			return c;
		}
		if (a.count == 0) {
			c.count = 0;
			return c;
		}

		int i, j, k, yes, cnt;
		int left, right, middle;
		long long m[MAX];
		long long n[MAX];

		m[a.count] = 0;
		for (i=0; i<a.count; i++)
			m[i] = a.a[i];

		c.count = a.count - b.count + 1;

		for (i=a.count-1, cnt=c.count-1; i>=b.count-1; i--, cnt--) {
			m[i] += m[i+1] * BASE;

			/* binary search : middle */
			left = 0;
			right = BASE - 1;
			middle = (left + right) / 2;
			while (left<=right) {
				/* n = b * middle */
				n[0] = 0;
				for (j=0; j<b.count; j++) {
					n[j] += (long long)b.a[j] * (long long)middle;
					n[j+1] = n[j] / BASE;
					n[j] %= BASE;
				}
				if (n[b.count] > 0)
					n[b.count-1] += n[b.count] * BASE;
				/* m < b*middle */
				yes = 0;
				for (j=i, k=b.count-1; !yes && k>=0; j--, k--)
					if (m[j] < n[k])
						yes = 1;
					else if (m[j] > n[k])
						break;
				if (yes) {
					right = middle-1;
					middle = (left + right) / 2;
					continue;
				}

				/* n = b * (middle+1) */
				n[0] = 0;
				for (j=0; j<b.count; j++) {
					n[j] += (long long)b.a[j] * (long long)(middle+1);
					n[j+1] = n[j] / BASE;
					n[j] %= BASE;
				}
				if (n[b.count] > 0)
					n[b.count-1] += n[b.count] * BASE;
				/* m >= b*(middle+1) */
				yes = 1;
				for (j=i, k=b.count-1; yes && k>=0; j--, k--)
					if (m[j] < n[k])
						yes = 0;
					else if (m[j] > n[k]) break;
				if (yes) {
					left = middle+1;
					middle = (left + right) / 2;
					continue;
				}

				/* b*middle <= m && m < b*(middle+1) */
				break;
			}

			/* Multiply */
			n[0] = 0;
			for (j=0; j<b.count; j++) {
				n[j] += (long long)b.a[j] * (long long)middle;
				n[j+1] = n[j] / BASE;
				n[j] %= BASE;
			}
			if (n[b.count] > 0)
				n[b.count-1] += n[b.count] * BASE;

			/* Subtraction */
			for (j=b.count-1, k=i; j>=0; j--, k--) {
				m[k] -= n[j];
				if (m[k] < 0) {
					m[k+1]--;
					m[k] += BASE;
				}
			}
		}

		c.count = b.count;
		/* if signs is not same */
		if (a.sign != b.sign) {
			/* c = b - c */
			int carry = 0;
			for (i=0; i<b.count; i++) {
				c.a[i] = b.a[i] - m[i] - carry;
				carry = 0;
				if (c.a[i] < 0) {
					c.a[i] += BASE;
					carry = 1;
				}
			}

		} else
			for (i=b.count-1; i>=0; i--)
				c.a[i] = m[i];

		while (c.count>0 && c.a[c.count-1] == 0)
			c.count--;

		return c;
	}

	Lint Lint_mult_int(Lint a, int n) {
	  Lint b;
	  int i;
	  long long m[MAX] = {0};

	  b.count = a.count + 1;

	  for (i=0; i<a.count; i++) {
	    m[i] += (long long)a.a[i] * (long long)n;
	    m[i+1] += m[i] / BASE;
	    m[i] %= BASE;
	  }

	  b.a[0] = 0;
	  for (i=0; i<b.count; i++)
	    b.a[i] = m[i];

	  while (b.a[b.count-1] == 0)
	    b.count--;

	  if (b.count < 0)
	    b.count = 0;

	  b.sign = 1;
	  if ((n < 0 && a.sign == 1) || (n >= 0 && a.sign == 0))
	    b.sign = 0;
	  return b;
	}
	Lint Lint_div_int(Lint a, int n) {
	  Lint c;
		int i;
		long long rem = 0; /* remainder */
		c.count = 0;
		for (i=a.count-1; i>=0; i--) {
			rem = rem * BASE + a.a[i];
			c.a[i] = (int) (rem / n);
			if (c.a[i]>0 && i>=c.count)
				c.count = i+1;
			rem %= n;
		}

		while(c.a[c.count-1] == 0)
			c.count--;

		return c;
	}

snippet libmatrix
	#define MAX 4
	#define MOD 1000000007

	typedef struct matrix {
		int row,col;
		long long m[MAX][MAX];
	} matrix;

	matrix operator *(matrix a, matrix b) {
		matrix c;
		long long t;
		c.row=a.row;
		c.col=b.col;

		REP(i, c.row)
		REP(j, c.col) {
			t = 0;
			REP(k, a.col)
				t = (t + a.m[i][k] * b.m[k][j]) % MOD;
			c.m[i][j] = t;
		}
		return c;
	}

	matrix operator ^(matrix a, int k){
		matrix c;
		if (k==1) return a;
		c = a ^ (k/2);
		c = c * c;
		if (k%2 == 0) return c;
		else return c*a;
	}
snippet libpowmod
	unsigned long long mult_mod(unsigned long long a, unsigned long long b, unsigned long long mod) {
		if (b == 1) return a;
		if (b % 2 == 0) {
			unsigned long long c = mult_mod(a, b/2, mod);
			return (c + c) % mod;
		}
		return (mult_mod(a, b-1, mod) + a) % mod;
	}

	unsigned long long pow_mod(unsigned long long a, unsigned long long b, unsigned long long mod) {
		if (b == 1) return a;
		if (b % 2 == 0) {
			unsigned long long c = pow_mod(a, b/2, mod);
			return mult_mod(c, c, mod);
		}
		return mult_mod(pow_mod(a, b-1, mod), a, mod);
	}
